import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import sklearn

from google.colab import files
uploaded = files.upload()

import io
df = pd.read_csv(io.BytesIO(uploaded['Iris.csv']))


df



df.dtypes

df.shape

df.size

df.columns

df.info()

df.describe()

df.corr()

df.nunique()

df.isnull().sum()



import missingno as no
no.bar(df,color='lightgreen')

df.plot()

sns.boxplot(y=df['SepalLengthCm'],x=df.Species,hue='Species',data=df,palette='Pastel1')

plt.figure(figsize=(10,8))
sns.scatterplot(x=df.SepalLengthCm , y=df['SepalWidthCm'], hue=df.Species, palette='icefire' )
plt.show()

plt.figure(figsize=(10,8))
sns.scatterplot(x=df.PetalLengthCm , y=df['PetalWidthCm'], hue=df.Species, palette='inferno_r' )
plt.show()

plt.figure(figsize=(16,6))
sns.violinplot(x=df.Species, y=df.PetalWidthCm, palette='Dark2')
plt.show()

plt.figure(figsize=(16,6))
sns.swarmplot(x=df.Species, y=df.PetalWidthCm, palette='Set2')

plt.figure(figsize=(16,6))
plt.style.use('seaborn-darkgrid')
sns.lineplot(x="PetalWidthCm" , y="SepalWidthCm" , hue="Species" , data=df)
plt.title('Petal Width vs Sepal Width', fontsize = 20)
plt.show()

plt.figure(figsize=(16,6))
plt.style.use('seaborn-darkgrid')
sns.lineplot(x="PetalLengthCm" , y="SepalLengthCm" , hue="Species" , data=df, palette='icefire')
plt.title('Petal Length vs Sepal Length', fontsize = 20)
plt.show()

sns.pairplot(df, hue = 'Species', palette='gist_rainbow')
plt.show()

plt.figure(figsize=(16,8))
sns.heatmap(df.corr(), yticklabels='auto', annot=True, cmap='YlOrRd')
plt.show()



from sklearn.cluster import KMeans
from sklearn import metrics

df = df.drop(['Id','Species'], axis=1)
df

within_cluster_sum_of_sq = []
for i in range(1,15):
  kmeans = KMeans(n_clusters=i)
  kmeans = kmeans.fit(df)
  within_cluster_sum_of_sq.append(kmeans.inertia_)

plt.plot(range(1,15), within_cluster_sum_of_sq,'go--', color = 'r')
plt.grid()
plt.xlabel('Number of clusters')
plt.ylabel('Within Cluster Sum of Square')
plt.title('The Elbow Method')
plt.show()



kmeans = KMeans(n_clusters=3, init='k-means++', max_iter=300, n_init=10, random_state=5)
pred = kmeans.fit_predict(df)

pred



plt.figure(figsize=(16,8))

x = df.iloc[:, [0, 1, 2, 3]].values
plt.scatter(x[pred == 0, 0], x[pred == 0, 1], s=25, c= 'red', label = 'iris-setosa')
plt.scatter(x[pred == 1, 0], x[pred == 1, 1], s=25, c= 'green', label = 'iris-versicolour')
plt.scatter(x[pred == 2, 0], x[pred == 2, 1], s=25, c= 'blue', label = 'iris-virginica')

plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:,1], s=80, color = '#000000', label = 'Centroids')
plt.legend()
plt.show()


import pickle
pickle.dump(kmeans, open("model.pkl","wb"))
